{"data":{"markdownRemark":{"html":"<h1>Future 🦄</h1>\n<ul>\n<li>Custom string types (maybe)</li>\n<li>Docs [ongoing]</li>\n<li>LHS expression type inference</li>\n<li>function level type inference </li>\n<li>Generators</li>\n<li>Promise Demo</li>\n<li>WebGL demo</li>\n<li>Threads support</li>\n<li>Native GC</li>\n</ul>\n<h2>0.5.0</h2>\n<ul>\n<li>✅Static strings</li>\n<li>✅Data section</li>\n<li>✅Binary NOT operator (~)</li>\n<li>✅Logical NOT operator (!)</li>\n<li>✅Native load/store operators</li>\n<li><a href=\"https://github.com/ballercat/walt/pull/113\">Imports</a></li>\n<li><a href=\"https://github.com/ballercat/walt/pull/113\">CLI</a></li>\n<li><a href=\"https://github.com/ballercat/walt/issues/72\">Nested structs, closures</a></li>\n<li><a href=\"https://github.com/ballercat/walt/issues/64\">Destructuring Assignment</a></li>\n</ul>\n<h2>✅<a href=\"https://github.com/ballercat/walt/pull/94\">0.4.0</a></h2>\n<ul>\n<li>✅<a href=\"https://github.com/ballercat/walt/pull/78\">Correct i64 encoding w/o typecasts</a></li>\n<li>✅🐞<a href=\"https://github.com/ballercat/walt/pull/78\">Global Array Encoding</a></li>\n<li>✅<a href=\"https://github.com/ballercat/walt/issues/21\">Name section [DX]</a></li>\n<li>✅<a href=\"https://github.com/ballercat/walt/issues/89\">Memory, Table as generic type</a></li>\n<li>✅Global config [meta][refactor]</li>\n<li>✅<a href=\"https://github.com/ballercat/walt/pull/97\">Metadata refactor - code debt</a></li>\n</ul>\n<h2>✅0.3.0 - Alpha</h2>\n<ul>\n<li>✅<a href=\"https://github.com/ballercat/walt/pull/66\">Closures</a> </li>\n<li>✅<a href=\"https://github.com/ballercat/walt/pull/53\">Monorepo, npm package [meta]</a></li>\n<li>✅<a href=\"https://github.com/ballercat/walt/issues/51\">Remove generator calls out of the parser</a> </li>\n<li>✅<a href=\"https://github.com/ballercat/walt/issues/49\">Semantic Analyzer</a></li>\n<li>✅<a href=\"https://github.com/ballercat/walt/issues/50\">Webpack loader MVP</a> </li>\n<li>✅<a href=\"https://github.com/ballercat/walt/issues/43\">Array Type function arguments</a> </li>\n<li>✅🐞<a href=\"https://github.com/ballercat/walt/issues/20\">Undefined type imports should throw</a> </li>\n<li>✅<a href=\"https://github.com/ballercat/walt/issues/25\">Better \"No ASI\" warnings</a></li>\n<li>✅<a href=\"https://github.com/ballercat/walt/issues/19\">else if</a> </li>\n<li>✅<a href=\"https://github.com/ballercat/walt/issues/34\">Logical operators</a> </li>\n<li>✅<a href=\"https://github.com/ballercat/walt/issues/33\">Bitwise operators</a> </li>\n<li>✅<a href=\"https://github.com/ballercat/walt/issues/28\">Dot operator</a> </li>\n<li>✅<a href=\"https://github.com/ballercat/walt/issues/23\">Spread Operator</a>  </li>\n<li>✅🐞<a href=\"https://github.com/ballercat/walt/issues/42\">Numbers inside identifiers</a></li>\n<li>✅🐞<a href=\"https://github.com/ballercat/walt/issues/40\">64 bit local function vars</a></li>\n</ul>\n<h2>0.2.1</h2>\n<ul>\n<li>Unary (-) operator</li>\n</ul>\n<h2>0.2.0</h2>\n<ul>\n<li>sizeof</li>\n<li>typecasts <code class=\"language-text\">(1 : f32), (0.5 : i32)</code> etc.</li>\n<li>top-level typecasts for expressions</li>\n<li>type promotions in math expressions</li>\n<li>type safety and warnings in binary expressions</li>\n<li>Canvas example</li>\n<li>Increment/decrement and assign +=/-=</li>\n<li>basic support for the break keyword</li>\n<li>node mapper</li>\n</ul>\n<h2>0.1.0</h2>\n<ul>\n<li>Stand-Alone <code class=\"language-text\">.walt</code> example files</li>\n<li>Object literals generated into the binary</li>\n<li>Object literal <code class=\"language-text\">.walt</code> example</li>\n</ul>\n<h2>0.0.2</h2>\n<ul>\n<li><code class=\"language-text\">CHANGELOG.md</code></li>\n<li><code class=\"language-text\">Memory</code> pre-defined type</li>\n<li>Object literal syntax parser</li>\n<li>Single line comment</li>\n<li><code class=\"language-text\">Memory</code> type must be explicitly defined before memory can be used</li>\n<li>Arrays can be indexed on any i32 offset</li>\n<li>Removed <code class=\"language-text\">new</code> keyword support</li>\n<li>Removed Implicit import of memory</li>\n</ul>\n<h2>0.0.1 - The Genesis</h2>\n<ul>\n<li>Examples</li>\n<li>Tokenizer</li>\n<li>Exports: functions, constant globals</li>\n<li>Declarations</li>\n<li>BinaryExpressions</li>\n<li>Local Scope &#x26; Global Scope</li>\n<li>Compile time warnings and errors</li>\n<li>Function imports</li>\n<li>Emitter</li>\n<li>Exports</li>\n<li>Functions</li>\n<li>Types - wasm built ins(i32/f32)</li>\n<li>custom function type imports</li>\n<li>Globals, Locals</li>\n</ul>\n<h2>Legend</h2>\n<ul>\n<li>🐞 - bug</li>\n<li>✅ - finished</li>\n<li>🚫 - blocked</li>\n<li>🔨 - work in progress</li>\n<li>native - Part of WebAssembly spec</li>\n</ul>","frontmatter":{"path":"/roadmap","title":"Roadmap"}}},"pageContext":{}}