{"data":{"allDocumentationJs":{"edges":[{"node":{"examples":[],"name":"def","kind":"constant","returns":[],"params":[],"description":{"childMarkdownRemark":{"html":"<p>Ported from <a href=\"https://github.com/WebAssembly/wabt/blob/master/src/opcode.def\">opcode.def</a></p>"}}}},{"node":{"examples":[],"name":"opcode","kind":"constant","returns":[],"params":[{"name":"result","type":{"name":null}},{"name":"first","type":{"name":null}},{"name":"second","type":{"name":null}},{"name":"size","type":{"name":"number"}},{"name":"code","type":{"name":"number"}},{"name":"name","type":{"name":"string"}},{"name":"text","type":{"name":"string"}}],"description":{"childMarkdownRemark":{"html":"<p>Convert Opcode definiton to usable object(s)\n*</p>"}}}},{"node":{"examples":[],"name":"opcodeFromOperator","kind":"constant","returns":[{"type":{"type":"NameExpression","name":"RawOpcodeType"}}],"params":[{"name":"$0","type":{"name":null}}],"description":{"childMarkdownRemark":{"html":"<p>Return opcode mapping to the operator. Signed result is always preferred</p>"}}}},{"node":{"examples":[],"name":"generateBinaryExpression","kind":"constant","returns":[],"params":[{"name":"node","type":null},{"name":"parent","type":null}],"description":{"childMarkdownRemark":{"html":"<p>Transform a binary expression node into a list of opcodes</p>"}}}},{"node":{"examples":[],"name":"invariant","kind":null,"returns":[],"params":[],"description":{"childMarkdownRemark":{"html":"<p>Generate an Intermediate version for a WebAssembly function type\n*</p>"}}}},{"node":{"examples":[],"name":"invariant","kind":null,"returns":[],"params":[],"description":{"childMarkdownRemark":{"html":"<div>Sizeof helper plugin. Maps size(<THING>) to a static i32 constant</div>"}}}},{"node":{"examples":[],"name":"semantics","kind":"function","returns":[{"type":{"type":"NameExpression","name":"NodeType"}}],"params":[{"name":"ast","type":{"name":"NodeType"}},{"name":"extraSemantics","type":{"name":null}},{"name":"options","type":{"name":"SemanticOptions"}}],"description":{"childMarkdownRemark":{"html":"<p>Return AST with full transformations applied</p>"}}}},{"node":{"examples":[],"name":"getIR","kind":"constant","returns":[],"params":[{"name":"source","type":{"name":"string"}},{"name":"config","type":{"name":"ConfigType"}}],"description":{"childMarkdownRemark":{"html":"<p>Used for debugging purposes</p>"}}}},{"node":{"examples":[{"highlighted":"<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> compile <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'walt-compiler'</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`\n   let counter: i32 = 0;\n   export function count(): i32 {\n     counter += 1;\n     return counter;\n   }\n`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nWebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiate</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`First invocation: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Second invocation: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"}],"name":"compile","kind":"constant","returns":[],"params":[{"name":"source","type":{"name":"string"}},{"name":"config","type":{"name":"ConfigType"}}],"description":{"childMarkdownRemark":{"html":"<p>Compile with plugins, future default export</p>"}}}}]}},"pageContext":{}}