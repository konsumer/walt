{"data":{"allDocumentationJs":{"edges":[{"node":{"examples":[],"name":"getIR","kind":"constant","returns":[],"params":[{"name":"source","type":{"name":"string"}},{"name":"config","type":{"name":"ConfigType"}}],"description":{"childMarkdownRemark":{"html":"<p>Used for debugging purposes</p>"}}}},{"node":{"examples":[{"highlighted":"<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> compile <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'walt-compiler'</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`\n   let counter: i32 = 0;\n   export function count(): i32 {\n     counter += 1;\n     return counter;\n   }\n`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nWebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiate</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`First invocation: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Second invocation: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"}],"name":"compile","kind":"constant","returns":[],"params":[{"name":"source","type":{"name":"string"}},{"name":"config","type":{"name":"ConfigType"}}],"description":{"childMarkdownRemark":{"html":"<p>Compile with plugins, future default export</p>"}}}},{"node":{"examples":[],"name":"makeLexer","kind":"function","returns":[],"params":[],"description":{"childMarkdownRemark":{"html":"<p>Returns a custom lexer. This wrapper API is necessary to ignore comments\nin all of the subsequent compiler phases, unfortunately.</p>\n<p>TODO: Maybe consider adding comment nodes back to the AST. IIRC this causes\nlots of ambiguous grammar for whatever reason.</p>"}}}}]}},"pageContext":{}}