{"data":{"allDocumentationJs":{"edges":[{"node":{"examples":[],"name":"getIR","kind":"constant","returns":[],"params":[{"name":"source","type":{"name":"string"}},{"name":"config","type":{"name":"ConfigType"}}],"description":{"childMarkdownRemark":{"html":"<p>Used for debugging purposes</p>"}}}},{"node":{"examples":[{"highlighted":"<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> compile <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'walt-compiler'</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`\n   let counter: i32 = 0;\n   export function count(): i32 {\n     counter += 1;\n     return counter;\n   }\n`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nWebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiate</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`First invocation: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Second invocation: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>"}],"name":"compile","kind":"constant","returns":[],"params":[{"name":"source","type":{"name":"string"}},{"name":"config","type":{"name":"ConfigType"}}],"description":{"childMarkdownRemark":{"html":"<p>Compile with plugins, future default export</p>"}}}},{"node":{"examples":[],"name":"generator","kind":"function","returns":[{"type":{"type":"NameExpression","name":"ProgramType"}}],"params":[{"name":"ast","type":{"name":"NodeType"}},{"name":"config","type":{"name":"GeneratorOptions"}}],"description":{"childMarkdownRemark":{"html":"<p>generator description?</p>"}}}},{"node":{"examples":[],"name":"makeFragment","kind":"constant","returns":[],"params":[{"name":"parser","type":{"name":"string"}},{"name":"source","type":{"name":"string"}}],"description":{"childMarkdownRemark":{"html":"<p>Creates the \"bare\" Abstract Syntax Tree.</p>"}}}},{"node":{"examples":[],"name":"makeParser","kind":null,"returns":[],"params":[{"name":"extraGrammar","type":{"name":null}},{"name":"source","type":{"name":"string"}}],"description":{"childMarkdownRemark":{"html":"<p>Creates the \"bare\" Abstract Syntax Tree.</p>"}}}},{"node":{"examples":[],"name":"semantics","kind":"function","returns":[{"type":{"type":"NameExpression","name":"NodeType"}}],"params":[{"name":"ast","type":{"name":"NodeType"}},{"name":"extraSemantics","type":{"name":null}},{"name":"options","type":{"name":"SemanticOptions"}}],"description":{"childMarkdownRemark":{"html":"<p>Return AST with full transformations applied</p>"}}}},{"node":{"examples":[],"name":"debug","kind":null,"returns":[],"params":[{"name":"stream","type":{"name":"OutputStream"}},{"name":"begin","type":{"name":"number"}},{"name":"end","type":{"name":"number"}}],"description":{"childMarkdownRemark":{"html":"<p>debug description?</p>"}}}},{"node":{"examples":[],"name":"prettyPrintNode","kind":null,"returns":[],"params":[],"description":{"childMarkdownRemark":{"html":"<p>printNode description?</p>"}}}},{"node":{"examples":[],"name":"stringDecoder","kind":"function","returns":[],"params":[{"name":"view","type":null},{"name":"start","type":null}],"description":{"childMarkdownRemark":{"html":"<p>stringDecoder description?</p>"}}}},{"node":{"examples":[],"name":"stringEncoder","kind":"function","returns":[{"type":{"type":"NameExpression","name":"string"}}],"params":[{"name":"value","type":{"name":"string"}}],"description":{"childMarkdownRemark":{"html":"<p>stringEncoder description?</p>"}}}},{"node":{"examples":[],"name":"validate","kind":"function","returns":[],"params":[{"name":"ast","type":{"name":"NodeType"}},{"name":"$1","type":{"name":null}}],"description":{"childMarkdownRemark":{"html":"<p>We walk the the entire tree and perform syntax validation before we continue\nonto the generator. This may throw sometimes</p>"}}}},{"node":{"examples":[],"name":"mapNode","kind":"function","returns":[],"params":[{"name":"visitor","type":null}],"description":{"childMarkdownRemark":{"html":"<p>This should maybe be it's own module.</p>"}}}},{"node":{"examples":[],"name":"walkNode","kind":null,"returns":[],"params":[{"name":"visitor","type":null}],"description":{"childMarkdownRemark":{"html":"<p>Dead simple AST walker, takes a visitor object and calls all methods for\nappropriate node Types.</p>"}}}},{"node":{"examples":[],"name":"emitter","kind":null,"returns":[],"params":[],"description":{"childMarkdownRemark":{"html":"<p>emitter description?</p>"}}}}]}},"pageContext":{}}