{"data":{"allDocumentationJs":{"edges":[{"node":{"name":"Syntax","kind":null,"examples":[],"returns":[],"params":[],"description":{"childMarkdownRemark":{"html":"<p>Bool plugin.\nConverts boolean identifiers to i32 constants, handles declarations with\ntype \"bool\".</p>"}}}},{"node":{"name":"def","kind":"constant","examples":[],"returns":[],"params":[],"description":{"childMarkdownRemark":{"html":"<p>Ported from <a href=\"https://github.com/WebAssembly/wabt/blob/master/src/opcode.def\">opcode.def</a></p>"}}}},{"node":{"name":"opcode","kind":"constant","examples":[],"returns":[],"params":[{"name":"result","type":{"name":null,"applications":null,"expression":{"name":"number"},"type":"NullableType"}},{"name":"first","type":{"name":null,"applications":null,"expression":{"name":"number"},"type":"NullableType"}},{"name":"second","type":{"name":null,"applications":null,"expression":{"name":"number"},"type":"NullableType"}},{"name":"size","type":{"name":"number","applications":null,"expression":null,"type":"NameExpression"}},{"name":"code","type":{"name":"number","applications":null,"expression":null,"type":"NameExpression"}},{"name":"name","type":{"name":"string","applications":null,"expression":null,"type":"NameExpression"}},{"name":"text","type":{"name":"string","applications":null,"expression":null,"type":"NameExpression"}}],"description":{"childMarkdownRemark":{"html":"<p>Convert Opcode definiton to usable object(s)\n*</p>"}}}},{"node":{"name":"opcodeFromOperator","kind":"constant","examples":[],"returns":[{"type":{"name":"RawOpcodeType"}}],"params":[{"name":"$0","type":{"name":null,"applications":null,"expression":null,"type":"AllLiteral"}}],"description":{"childMarkdownRemark":{"html":"<p>Return opcode mapping to the operator. Signed result is always preferred</p>"}}}},{"node":{"name":"Syntax","kind":null,"examples":[],"returns":[],"params":[],"description":{"childMarkdownRemark":{"html":"<p>Array Plugin</p>"}}}},{"node":{"name":"Syntax","kind":null,"examples":[],"returns":[],"params":[],"description":{"childMarkdownRemark":{"html":"<p>Function pointer plugin.\nHandles function pointer declaration and indirect calls.</p>"}}}},{"node":{"name":"Syntax","kind":null,"examples":[],"returns":[],"params":[],"description":{"childMarkdownRemark":{"html":"<p>Imports Plugin</p>"}}}},{"node":{"name":"Syntax","kind":null,"examples":[],"returns":[],"params":[],"description":{"childMarkdownRemark":{"html":"<p>Core language plugin</p>\n<p>The parsers in here very closely mirror the underlying WebAssembly structure\nand are used as the core language for every feature built on top.</p>"}}}},{"node":{"name":"Syntax","kind":null,"examples":[],"returns":[],"params":[],"description":{"childMarkdownRemark":{"html":"<p>Handles access to memory and Memory type declaration</p>"}}}},{"node":{"name":"Syntax","kind":null,"examples":[],"returns":[],"params":[],"description":{"childMarkdownRemark":{"html":"<p>Native methods plugin</p>"}}}},{"node":{"name":"Syntax","kind":null,"examples":[],"returns":[],"params":[],"description":{"childMarkdownRemark":{"html":"<p>Static value plugin</p>"}}}},{"node":{"name":"Syntax","kind":null,"examples":[],"returns":[],"params":[],"description":{"childMarkdownRemark":{"html":"<p>Structs Plugin</p>"}}}},{"node":{"name":"Syntax","kind":null,"examples":[],"returns":[],"params":[],"description":{"childMarkdownRemark":{"html":"<p>Types plugin. Parses all types before the rest of the program</p>\n<p>(Does not handle Generic Types)</p>"}}}},{"node":{"name":"Syntax","kind":null,"examples":[],"returns":[],"params":[],"description":{"childMarkdownRemark":{"html":"<p>Unary operator plugin.</p>"}}}},{"node":{"name":"test","kind":null,"examples":[],"returns":[],"params":[],"description":{"childMarkdownRemark":{"html":"<p>Test JavaScript <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators\">arithmetic operators</a></p>"}}}},{"node":{"name":"curry","kind":null,"examples":[],"returns":[],"params":[],"description":{"childMarkdownRemark":{"html":"<p>Syntax Analysis</p>\n<p>The parser below creates the \"bare\" Abstract Syntax Tree.</p>"}}}},{"node":{"name":"generateBinaryExpression","kind":"constant","examples":[],"returns":[],"params":[{"name":"node","type":null},{"name":"parent","type":null}],"description":{"childMarkdownRemark":{"html":"<p>Transform a binary expression node into a list of opcodes</p>"}}}},{"node":{"name":"invariant","kind":null,"examples":[],"returns":[],"params":[],"description":{"childMarkdownRemark":{"html":"<p>Syntax Analysis</p>\n<p>The parser below creates the \"bare\" Abstract Syntax Tree.</p>"}}}},{"node":{"name":"makeLexer","kind":"function","examples":[],"returns":[],"params":[],"description":{"childMarkdownRemark":{"html":"<p>Returns a custom lexer. This wrapper API is necessary to ignore comments\nin all of the subsequent compiler phases, unfortunately.</p>\n<p>TODO: Maybe consider adding comment nodes back to the AST. IIRC this causes\nlots of ambiguous grammar for whatever reason.</p>"}}}},{"node":{"name":"invariant","kind":null,"examples":[],"returns":[],"params":[],"description":{"childMarkdownRemark":{"html":"<p>Generate an Intermediate version for a WebAssembly function type\n*</p>"}}}},{"node":{"name":"Syntax","kind":null,"examples":[],"returns":[],"params":[],"description":{"childMarkdownRemark":{"html":"<p>Default Arguments syntax sugar plugin.</p>\n<p>Converts FUNCTION CALLS with missing arguments to default values</p>"}}}},{"node":{"name":"invariant","kind":null,"examples":[],"returns":[],"params":[],"description":{"childMarkdownRemark":{"html":"<div>Sizeof helper plugin. Maps size(<THING>) to a static i32 constant</div>"}}}},{"node":{"name":"fsearch","kind":"constant","examples":[],"returns":[],"params":[{"name":"node","type":null}],"description":{"childMarkdownRemark":{"html":"<p>A very basic trie with functional,recursive search</p>"}}}},{"node":{"name":"semantics","kind":"function","examples":[],"returns":[{"type":{"name":"NodeType"}}],"params":[{"name":"ast","type":{"name":"NodeType","applications":null,"expression":null,"type":"NameExpression"}},{"name":"extraSemantics","type":{"name":null,"applications":[{"name":"SemanticsFactory"}],"expression":{"name":"Array"},"type":"TypeApplication"}},{"name":"options","type":{"name":"SemanticOptions","applications":null,"expression":null,"type":"NameExpression"}}],"description":{"childMarkdownRemark":{"html":"<p>Return AST with full transformations applied</p>"}}}},{"node":{"name":"getIR","kind":"constant","examples":[],"returns":[],"params":[{"name":"source","type":{"name":"string","applications":null,"expression":null,"type":"NameExpression"}},{"name":"config","type":{"name":"ConfigType","applications":null,"expression":null,"type":"NameExpression"}}],"description":{"childMarkdownRemark":{"html":"<p>Used for debugging purposes</p>"}}}},{"node":{"name":"compile","kind":"constant","examples":[{"highlighted":"<span class=\"token template-string\"><span class=\"token string\">``</span></span><span class=\"token template-string\"><span class=\"token string\">`js\nimport { compile } from 'walt-compiler';\n\nconst buffer = compile(`</span></span>\n<span class=\"token keyword\">let</span> counter<span class=\"token punctuation\">:</span> i32 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> i32 <span class=\"token punctuation\">{</span>\ncounter <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> counter<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token template-string\"><span class=\"token string\">`).buffer();\n\nWebAssembly.instantiate(buffer).then(result => {\nconsole.log(`</span></span>First invocation<span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token template-string\"><span class=\"token string\">`);\nconsole.log(`</span></span>Second invocation<span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token template-string\"><span class=\"token string\">`);\n});\n`</span></span><span class=\"token template-string\"><span class=\"token string\">``</span></span>"}],"returns":[],"params":[{"name":"source","type":{"name":"string","applications":null,"expression":null,"type":"NameExpression"}},{"name":"config","type":{"name":"ConfigType","applications":null,"expression":null,"type":"NameExpression"}}],"description":{"childMarkdownRemark":{"html":"<p>Compile with plugins, future default export</p>"}}}}]}},"pageContext":{}}