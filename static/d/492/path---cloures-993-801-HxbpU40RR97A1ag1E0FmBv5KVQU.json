{"data":{"markdownRemark":{"html":"<h1>Intro</h1>\n<p>Closures are a very powerful abstraction in JavaScript, because of this Walt supports a very straightforward syntax for working with closures.</p>\n<h2>Syntax</h2>\n<p>A closure is a function which is defined by the ES6-like anonymous arrow function syntax. Unlike regular functions in JavaScript, an inner closure can only be created with an arrow function.</p>\n<p>Like function pointers, a closure <em>instance</em> must be associated with an appropriate type definition. In Walt a regular function type can be modified with the <code class=\"language-text\">lambda</code> keyword to indicate to the compiler that this function type will be used as a closure.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Reads as: \"a function type, which is a lambda taking no arguments and returning 32-bit integer\"</span>\ntype lambda <span class=\"token function-variable function\">Closure</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> i32<span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>A table must be present in the module before you can invoke closures</strong>. A closure call is ultimately an <code class=\"language-text\">indirect_call</code>/function-pointer and requires a table.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> table<span class=\"token punctuation\">:</span> Table <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> element<span class=\"token punctuation\">:</span> anyfunc<span class=\"token punctuation\">,</span> initial<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Unlike regular functions types(like the ones used for imports), lambdas are <em>64-bits</em> wide. Without the <code class=\"language-text\">lambda</code> modifier a function type will be treated as a regular function pointer type, which <em>32-bits</em> wide.</p>\n<p><strong>To return a closure from a function</strong> all you need to do is annotate it with a lambda type and return a closure.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Closure <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span> i32 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Not a very useful closure, but good enough for a demo</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> i32 <span class=\"token punctuation\">{</span>\n    x <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>To store a closure in a variable</strong>, a variable must be annotated with the closure Type.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> count<span class=\"token punctuation\">:</span> Closure <span class=\"token operator\">=</span> <span class=\"token function\">getCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>A closure is used just like any other function pointer.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> i32 <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// create a variable</span>\n  <span class=\"token keyword\">const</span> count<span class=\"token punctuation\">:</span> Closure <span class=\"token operator\">=</span> <span class=\"token function\">getCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// this will be 3</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Compiling</h2>\n<p>Closures are a <em>optional</em> feature. The compiler will not generate any additional code to handle them unless they are used within the source. When you do define a closure within your source, the compiler will generate imports for a <code class=\"language-text\">walt-plugin-closure</code>. This import must exist in order for closures to be used and invoked in the final WebAssembly binary.</p>\n<p>Using the closure plugin is rather simple and can be seen in the <a href=\"https://ballercat.github.io/walt/\">Explorer Demo page</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> compiler<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> closurePlugin<span class=\"token punctuation\">,</span> withPlugins <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'walt-compiler'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// First we need an instance of the closure plugin</span>\nWebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiate</span><span class=\"token punctuation\">(</span><span class=\"token function\">closurePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>closure <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> WebAssembly<span class=\"token punctuation\">.</span><span class=\"token function\">instantiate</span><span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// walt source code to buffer    </span>\n    <span class=\"token function\">compiler</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Inject the plugin into the importsObj</span>\n    <span class=\"token function\">withPlugins</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      closure\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>module <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> test <span class=\"token operator\">=</span> module<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><em>Future version of the compiler will have a helper method which will abstract this for you</em>.</p>\n<h3>Plugin</h3>\n<p>The purpose of the plugin is to define <strong>a separate memory space for dynamic closures</strong>. Walt does not come with a memory runtime and never touches the memory defined in your module implicitly. To get around this, features that <em>do</em> require dynamic memory are offloaded to another WebAssembly module which is dynamically linked during compilation, a plugin. Because the imports are other WebAssembly methods, <strong>there is no additional overhead to invoking these methods</strong>.</p>\n<p>This abstraction allows for the end-user to overwrite the closure plugin. You may decide you have a better or more performant closure allocator that you'd like to use. You can even define the plugin methods entirely in JavaScript, however that will incur a runtime penalty for invoking JS functions from WebAssembly.</p>\n<p><em>*At this point the default Closure plugin is very basic and does not fully implement a free() method</em>.</p>\n<h4>ABI</h4>\n<p>The following imports and types are injected at the top of your module when using closures.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'closure-malloc'</span><span class=\"token punctuation\">:</span> ClosureGeti32<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'closure-free'</span><span class=\"token punctuation\">:</span> ClosureFree<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'closure--get-i32'</span><span class=\"token punctuation\">:</span> ClosureGeti32<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'closure--get-f32'</span><span class=\"token punctuation\">:</span> ClosureGetf32<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'closure--get-i64'</span><span class=\"token punctuation\">:</span> ClosureGeti64<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'closure--get-f64'</span><span class=\"token punctuation\">:</span> ClosureGetf64<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'closure--set-i32'</span><span class=\"token punctuation\">:</span> ClosureSeti32<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'closure--set-f32'</span><span class=\"token punctuation\">:</span> ClosureSetf32<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'closure--set-i64'</span><span class=\"token punctuation\">:</span> ClosureSeti64<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'closure--set-f64'</span><span class=\"token punctuation\">:</span> ClosureSetf64\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'walt-plugin-closure'</span><span class=\"token punctuation\">;</span>\n    type <span class=\"token function-variable function\">ClosureFree</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i32<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    type <span class=\"token function-variable function\">ClosureGeti32</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i32<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> i32<span class=\"token punctuation\">;</span>\n    type <span class=\"token function-variable function\">ClosureGetf32</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i32<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> f32<span class=\"token punctuation\">;</span>\n    type <span class=\"token function-variable function\">ClosureGeti64</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i32<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> i64<span class=\"token punctuation\">;</span>\n    type <span class=\"token function-variable function\">ClosureGetf64</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i32<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> f64<span class=\"token punctuation\">;</span>\n    type <span class=\"token function-variable function\">ClosureSeti32</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i32<span class=\"token punctuation\">,</span> i32<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    type <span class=\"token function-variable function\">ClosureSetf32</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i32<span class=\"token punctuation\">,</span> f32<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    type <span class=\"token function-variable function\">ClosureSeti64</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i32<span class=\"token punctuation\">,</span> i64<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    type <span class=\"token function-variable function\">ClosureSetf64</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i32<span class=\"token punctuation\">,</span> f64<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You are free to overwrite all of a subset of these imports via the <code class=\"language-text\">importsObject</code> argument.</p>\n<h2>Details for Nerds</h2>\n<p>For low-level implementation details see <a href=\"https://github.com/ballercat/walt/pull/66\">Closures PR</a></p>","frontmatter":{"path":"/cloures","title":"Closures"}}},"pageContext":{}}